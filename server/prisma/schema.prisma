// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Manufacturer {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(100)
  website    String?     @db.VarChar(255)
  components Component[]

  @@map("Manufacturer")
}

model ComponentType {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(100)
  slug       String      @unique @db.VarChar(100)
  reference  String?     @db.VarChar(100)
  components Component[]

  @@map("ComponentType")
}

model Component {
  id              Int       @id @default(autoincrement())
  release_date    DateTime? @db.Date
  specs           Json
  oc_profiles     Json
  name            String    @db.VarChar(150)
  type_id         Int
  manufacturer_id Int

  type         ComponentType @relation(fields: [type_id], references: [id])
  manufacturer Manufacturer  @relation(fields: [manufacturer_id], references: [id])

  compatibilityA Compatibility[] @relation("compatA")
  compatibilityB Compatibility[] @relation("compatB")

  vendorComponents VendorComponent[]
  buildItems       BuildItem[]

  @@map("Component")
}

model Compatibility {
  component_a_id Int
  component_b_id Int
  compatible     Boolean

  componentA Component @relation("compatA", fields: [component_a_id], references: [id])
  componentB Component @relation("compatB", fields: [component_b_id], references: [id])

  @@id([component_a_id, component_b_id])
  @@map("Compatibility")
}

model Vendor {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(100)
  website          String?           @db.VarChar(255)
  vendorComponents VendorComponent[]

  @@map("Vendor")
}

model VendorComponent {
  id           Int      @id @default(autoincrement())
  in_stock     Boolean
  last_checked DateTime
  product_url  String   @db.VarChar(500)
  vendor_id    Int
  component_id Int

  vendor       Vendor         @relation(fields: [vendor_id], references: [id])
  component    Component      @relation(fields: [component_id], references: [id])
  priceHistory PriceHistory[]

  @@map("VendorComponent")
}

model PriceHistory {
  id                  Int      @id @default(autoincrement())
  recorded_at         DateTime
  price               Decimal  @db.Decimal(10, 2)
  vendor_component_id Int

  vendorComponent VendorComponent @relation(fields: [vendor_component_id], references: [id])

  @@map("PriceHistory")
}

model User {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now())
  name       String   @db.VarChar(150)
  email      String   @unique @db.VarChar(255)
  password   String   @db.VarChar(255)
  role       Role
  builds     Build[]

  @@map("User")
}

model Build {
  id         Int         @id @default(autoincrement())
  created_at DateTime    @default(now())
  price      Int
  name       String      @db.VarChar(150)
  user_id    String      @db.Uuid
  user       User        @relation(fields: [user_id], references: [id])
  items      BuildItem[]

  @@map("Build")
}

model BuildItem {
  id           Int     @id @default(autoincrement())
  quantity     Int
  price_each   Decimal @db.Decimal(10, 2)
  build_id     Int
  component_id Int

  build     Build     @relation(fields: [build_id], references: [id])
  component Component @relation(fields: [component_id], references: [id])

  @@map("BuildItem")
}

enum Role {
  ADMIN
  USER
}
