// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Manufacturer {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(100)
  website    String?     @db.VarChar(255)
  components Component[]

  @@map("Manufacturer")
}

model ComponentType {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(100)
  slug       String      @unique @db.VarChar(100)
  reference  String?     @db.VarChar(100)
  components Component[]

  @@map("ComponentType")
}

model Component {
  id              Int       @id @default(autoincrement())
  imgUrl         String?   @db.VarChar(500)
  releaseDate    DateTime? @db.Date
  specs           Json
  ocProfiles     Json
  name            String    @db.VarChar(150)
  price           Decimal   @db.Decimal(10, 2)
  description     String?   @db.Text
  typeId         Int
  manufacturerId Int

  type         ComponentType @relation(fields: [typeId], references: [id])
  manufacturer Manufacturer  @relation(fields: [manufacturerId], references: [id])

  compatibilityA Compatibility[] @relation("compatA")
  compatibilityB Compatibility[] @relation("compatB")

  vendorComponents VendorComponent[]
  buildItems       BuildItem[]

  @@map("Component")
}

model Compatibility {
  componentAId Int
  componentBId Int
  compatible     Boolean

  componentA Component @relation("compatA", fields: [componentAId], references: [id])
  componentB Component @relation("compatB", fields: [componentBId], references: [id])

  @@id([componentAId, componentBId])
  @@map("Compatibility")
}

model Vendor {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(100)
  website          String?           @db.VarChar(255)
  vendorComponents VendorComponent[]

  @@map("Vendor")
}

model VendorComponent {
  id           Int      @id @default(autoincrement())
  inStock     Boolean
  lastChecked DateTime
  productUrl  String   @db.VarChar(500)
  vendorId    Int
  componentId Int

  vendor       Vendor         @relation(fields: [vendorId], references: [id])
  component    Component      @relation(fields: [componentId], references: [id])
  priceHistory PriceHistory[]

  @@map("VendorComponent")
}

model PriceHistory {
  id                  Int      @id @default(autoincrement())
  recorded_at         DateTime
  price               Decimal  @db.Decimal(10, 2)
  vendorComponentId Int

  vendorComponent VendorComponent @relation(fields: [vendorComponentId], references: [id])

  @@map("PriceHistory")
}

model User {
  id         String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  name       String   @db.VarChar(150)
  email      String   @unique @db.VarChar(255)
  password   String   @db.VarChar(255)
  role       Role
  builds     Build[]
  orders     Order[]
  addresses  Address[]

  @@map("User")
}

model Build {
  id         Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  price      Decimal     @db.Decimal(10, 2)
  name       String      @db.VarChar(150)
  userId    String      @db.Uuid
  user       User        @relation(fields: [userId], references: [id])
  items      BuildItem[]

  @@map("Build")
}

model BuildItem {
  id           Int     @id @default(autoincrement())
  quantity     Int
  price        Decimal @db.Decimal(10, 2)
  buildId     Int
  componentId Int

  build     Build     @relation(fields: [buildId], references: [id] , onDelete: Cascade)
  component Component @relation(fields: [componentId], references: [id])

  @@map("BuildItem")
}

model Address {
  id         Int    @id @default(autoincrement())
  label      String
  name       String
  phone      String
  address    String
  postalCode String
  city       String
  country    String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String @db.Uuid
}

model Carrier {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
}

model Order {
  id           String       @id @default(cuid())
  status       String
  orderNumber  String?      @unique
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String       @db.Uuid
  address      String
  carrierName  String
  carrierPrice Decimal      @db.Decimal(10, 2)
  subTotal     Decimal      @db.Decimal(10, 2)
  total        Decimal      @db.Decimal(10, 2)
  createdAt    DateTime     @default(now())
  orderItems   OrderItems[]
}

model OrderItems {
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String
  component String
  price    Decimal @db.Decimal(10, 2)
  quantity Int
  id       String  @id @default(cuid())
}

enum Role {
  ADMIN
  USER
}
